{"version":3,"sources":["components/Movie.js","views/App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","components_Movie","id","title_english","medium_cover_image","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","views_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAoDA,SAASA,EAATC,GAAuC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC9B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAML,EAASC,IAAI,eAAKK,MAAQL,EAAMM,UAAU,iBAIzD,SAASC,EAATC,GAAgC,IAATC,EAASD,EAATC,MACrB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAgBG,GAqBrBC,MA/Cf,SAAAC,GAAqD,IAAnCN,EAAmCM,EAAnCN,MAAON,EAA4BY,EAA5BZ,OAAQa,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACvC,OACEZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAASA,EAASC,IAAMK,KAEvCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,UAAME,GACNJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACXM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAQA,EAAQO,IAAOD,OAEpEd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACTO,MCGCI,6MA1CbC,MAAQ,KAMRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAApB,EAAAqB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SAAS,CACZT,WAHS,wBAAAG,EAAAO,SAAAX,QAObQ,SAAW,WACT,OAAOI,MAAM,yDACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,cAAgB,WAWd,OAVed,EAAKT,MAAMG,OAAOP,IAAI,SAAA4B,GAEnC,OADAH,QAAQC,IAAIE,GACJzC,EAAAC,EAAAC,cAACwC,EAAD,CACN3B,IAAM0B,EAAME,GACZvC,MAAQqC,EAAMG,cACd9C,OAAS2C,EAAMI,mBACflC,OAAS8B,EAAM9B,OACfC,SAAW6B,EAAM7B,iGAzBrBkC,KAAK5B,8CA+BL,OACElB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXyC,KAAK7B,MAAMG,OAAS0B,KAAKN,gBAAkB,qBAvCnCO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.c090b9c2.chunk.js","sourcesContent":["// import React, { Component } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../assets/css/Movie.css';\r\n\r\n// class Movie extends Component {\r\n//   static propTypes = {\r\n//     // props의 type과 required 체크 가능\r\n//     title: PropTypes.string.isRequired,\r\n//     poster: PropTypes.string.isRequired,\r\n//     genres: PropTypes.array.isRequired,\r\n//     synopsis: PropTypes.string.isRequired,\r\n//   }\r\n//   render () {\r\n//     return (\r\n//       <div className=\"Movie\">\r\n//         <MoviePoster poster={ this.props.poster } />\r\n//         <h1>{ this.props.title }</h1>\r\n//       </div> \r\n//     );\r\n//   }\r\n// }\r\n// class MoviePoster extends Component {\r\n//   static propTypes = {\r\n//     // props의 type과 required 체크 가능\r\n//     poster: PropTypes.string.isRequired\r\n//   }\r\n//   render () {\r\n//     return (\r\n//       <img src={ this.props.poster } alt=\"Movie Poster\" />\r\n//     );\r\n//   }\r\n// }\r\n// state 없고 function render 없고 lifecycle 없고 props와 태그 return만 있을 때 function으로\r\nfunction Movie ({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div>\r\n        <div className=\"Movie_Columns\">\r\n          <MoviePoster poster={ poster } alt={ title } />\r\n        </div>\r\n        <div className=\"Movie_Columns\">\r\n          <h1>{ title }</h1>\r\n          <div className=\"Movie_Genres\">\r\n            { genres.map((genre, index) => <MovieGenre genre={ genre } key= { index } />) }\r\n          </div>\r\n          <p className=\"Movie_Synopsis\">\r\n            { synopsis }\r\n          </p>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\nfunction MoviePoster ({ poster, alt }) {\r\n  return (\r\n    <img src={ poster } alt='안녕' title={ alt } className=\"Movie_Poster\" />\r\n  )\r\n}\r\n\r\nfunction MovieGenre ({ genre }) {\r\n  return (\r\n    <span className=\"Movie_Genre\">{ genre }</span>\r\n  )\r\n}\r\n\r\nMovie.propTypes = {\r\n  // props의 type과 required 체크 가능\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\nMoviePoster.propTypes = {\r\n  // props의 type과 required 체크 가능\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n}\r\nMovieGenre.propTypes = {\r\n  // props의 type과 required 체크 가능\r\n  genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;\r\n","import React, { Component } from 'react';\nimport '../assets/css/App.css';\nimport Movie from '../components/Movie';\n\nclass App extends Component {\n  // Render: componentWillMount () -> render () -> componentDidMount ()\n  // Update: componentWillReceiveProps () -> shouldComponentUpdate () === true || false -> componentWillUpdate () -> render () -> componentDidUpdate ()\n  state = {}\n\n  componentDidMount () {\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie)\n      return  <Movie\n        key={ movie.id }\n        title={ movie.title_english }\n        poster={ movie.medium_cover_image }\n        genres={ movie.genres }\n        synopsis={ movie.synopsis }\n      />\n    })\n    return movies\n  }\n  render () {\n    return (\n      <div className=\"App\">\n        { this.state.movies ? this._renderMovies() : 'Loading...' }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/css/index.css';\r\nimport App from './views/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}